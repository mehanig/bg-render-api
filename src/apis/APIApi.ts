/* tslint:disable */
/* eslint-disable */
/**
 * BgRenderer Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AeRendererState,
    AeRendererStateFromJSON,
    AeRendererStateToJSON,
    BGRendererInput,
    BGRendererInputFromJSON,
    BGRendererInputToJSON,
    CPUStats,
    CPUStatsFromJSON,
    CPUStatsToJSON,
    MirrorService,
    MirrorServiceFromJSON,
    MirrorServiceToJSON,
    RenderQueueItemRemovePayload,
    RenderQueueItemRemovePayloadFromJSON,
    RenderQueueItemRemovePayloadToJSON,
    ServiceKey,
    ServiceKeyFromJSON,
    ServiceKeyToJSON,
} from '../models';

export interface RemoveQueueItemsRequest {
    renderQueueItemRemovePayload?: RenderQueueItemRemovePayload;
}

export interface RunAeRequest {
    bGRendererInput?: BGRendererInput;
}

export interface ScheduleQueueItemsRequest {
    bGRendererInput?: BGRendererInput;
}

export interface SetCPULimitRequest {
    cPUStats?: CPUStats;
}

export interface SetMirrorServiceConfigRequest {
    mirrorService?: MirrorService;
}

/**
 * no description
 */
export class APIApi extends runtime.BaseAPI {

    /**
     */
    async addThreadRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/addThread`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async addThread(): Promise<void> {
        await this.addThreadRaw();
    }

    /**
     */
    async getMirrorServiceConfigRaw(): Promise<runtime.ApiResponse<MirrorService>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/mirrorConfig`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MirrorServiceFromJSON(jsonValue));
    }

    /**
     */
    async getMirrorServiceConfig(): Promise<MirrorService> {
        const response = await this.getMirrorServiceConfigRaw();
        return await response.value();
    }

    /**
     */
    async getModelRaw(): Promise<runtime.ApiResponse<AeRendererState>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/model`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AeRendererStateFromJSON(jsonValue));
    }

    /**
     */
    async getModel(): Promise<AeRendererState> {
        const response = await this.getModelRaw();
        return await response.value();
    }

    /**
     */
    async getServiceKeyRaw(): Promise<runtime.ApiResponse<ServiceKey>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/serviceKey`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceKeyFromJSON(jsonValue));
    }

    /**
     */
    async getServiceKey(): Promise<ServiceKey> {
        const response = await this.getServiceKeyRaw();
        return await response.value();
    }

    /**
     */
    async greetRaw(): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async greet(): Promise<string> {
        const response = await this.greetRaw();
        return await response.value();
    }

    /**
     */
    async killAppRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/killApp`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async killApp(): Promise<void> {
        await this.killAppRaw();
    }

    /**
     */
    async killApp_1Raw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/killApp`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async killApp_1(): Promise<void> {
        await this.killApp_1Raw();
    }

    /**
     */
    async removeQueueItemsRaw(requestParameters: RemoveQueueItemsRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/remove`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RenderQueueItemRemovePayloadToJSON(requestParameters.renderQueueItemRemovePayload),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeQueueItems(requestParameters: RemoveQueueItemsRequest): Promise<void> {
        await this.removeQueueItemsRaw(requestParameters);
    }

    /**
     */
    async runAeRaw(requestParameters: RunAeRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/run`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BGRendererInputToJSON(requestParameters.bGRendererInput),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async runAe(requestParameters: RunAeRequest): Promise<void> {
        await this.runAeRaw(requestParameters);
    }

    /**
     */
    async scheduleQueueItemsRaw(requestParameters: ScheduleQueueItemsRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/schedule`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BGRendererInputToJSON(requestParameters.bGRendererInput),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async scheduleQueueItems(requestParameters: ScheduleQueueItemsRequest): Promise<void> {
        await this.scheduleQueueItemsRaw(requestParameters);
    }

    /**
     */
    async setCPULimitRaw(requestParameters: SetCPULimitRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/cpulimit`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CPUStatsToJSON(requestParameters.cPUStats),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async setCPULimit(requestParameters: SetCPULimitRequest): Promise<void> {
        await this.setCPULimitRaw(requestParameters);
    }

    /**
     */
    async setMirrorServiceConfigRaw(requestParameters: SetMirrorServiceConfigRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/mirrorConfig`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MirrorServiceToJSON(requestParameters.mirrorService),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async setMirrorServiceConfig(requestParameters: SetMirrorServiceConfigRequest): Promise<void> {
        await this.setMirrorServiceConfigRaw(requestParameters);
    }

}
