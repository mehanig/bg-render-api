/* tslint:disable */
/* eslint-disable */
/**
 * BgRenderer Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface FfmpegSettings
 */
export interface FfmpegSettings {
    /**
     * 
     * @type {boolean}
     * @memberof FfmpegSettings
     */
    isRawMode?: boolean;
    /**
     * 
     * @type {string}
     * @memberof FfmpegSettings
     */
    pathToFile?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FfmpegSettings
     */
    customFolderPath?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof FfmpegSettings
     */
    removeSequence?: boolean;
    /**
     * 
     * @type {string}
     * @memberof FfmpegSettings
     */
    audioTrack?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FfmpegSettings
     */
    fps?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FfmpegSettings
     */
    startNumber?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FfmpegSettings
     */
    framesNumber?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof FfmpegSettings
     */
    useAllFilesInFolder?: boolean;
    /**
     * 
     * @type {string}
     * @memberof FfmpegSettings
     */
    presetType?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof FfmpegSettings
     */
    templateArgs?: Array<string> | null;
}

export function FfmpegSettingsFromJSON(json: any): FfmpegSettings {
    return FfmpegSettingsFromJSONTyped(json, false);
}

export function FfmpegSettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): FfmpegSettings {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'isRawMode': !exists(json, 'isRawMode') ? undefined : json['isRawMode'],
        'pathToFile': !exists(json, 'pathToFile') ? undefined : json['pathToFile'],
        'customFolderPath': !exists(json, 'customFolderPath') ? undefined : json['customFolderPath'],
        'removeSequence': !exists(json, 'removeSequence') ? undefined : json['removeSequence'],
        'audioTrack': !exists(json, 'audioTrack') ? undefined : json['audioTrack'],
        'fps': !exists(json, 'fps') ? undefined : json['fps'],
        'startNumber': !exists(json, 'startNumber') ? undefined : json['startNumber'],
        'framesNumber': !exists(json, 'framesNumber') ? undefined : json['framesNumber'],
        'useAllFilesInFolder': !exists(json, 'useAllFilesInFolder') ? undefined : json['useAllFilesInFolder'],
        'presetType': !exists(json, 'presetType') ? undefined : json['presetType'],
        'templateArgs': !exists(json, 'templateArgs') ? undefined : json['templateArgs'],
    };
}

export function FfmpegSettingsToJSON(value?: FfmpegSettings | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'isRawMode': value.isRawMode,
        'pathToFile': value.pathToFile,
        'customFolderPath': value.customFolderPath,
        'removeSequence': value.removeSequence,
        'audioTrack': value.audioTrack,
        'fps': value.fps,
        'startNumber': value.startNumber,
        'framesNumber': value.framesNumber,
        'useAllFilesInFolder': value.useAllFilesInFolder,
        'presetType': value.presetType,
        'templateArgs': value.templateArgs,
    };
}


