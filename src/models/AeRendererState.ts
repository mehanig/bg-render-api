/* tslint:disable */
/* eslint-disable */
/**
 * BgRenderer Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CPUStats,
    CPUStatsFromJSON,
    CPUStatsFromJSONTyped,
    CPUStatsToJSON,
    Job,
    JobFromJSON,
    JobFromJSONTyped,
    JobToJSON,
    PauseState,
    PauseStateFromJSON,
    PauseStateFromJSONTyped,
    PauseStateToJSON,
    RenderQueueItem,
    RenderQueueItemFromJSON,
    RenderQueueItemFromJSONTyped,
    RenderQueueItemToJSON,
} from './';

/**
 * 
 * @export
 * @interface AeRendererState
 */
export interface AeRendererState {
    /**
     * 
     * @type {string}
     * @memberof AeRendererState
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AeRendererState
     */
    machineId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AeRendererState
     */
    settings?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AeRendererState
     */
    errorMessage?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AeRendererState
     */
    isDone?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AeRendererState
     */
    frameRate?: string | null;
    /**
     * 
     * @type {Array<Job>}
     * @memberof AeRendererState
     */
    jobs?: Array<Job> | null;
    /**
     * 
     * @type {Array<RenderQueueItem>}
     * @memberof AeRendererState
     */
    queue?: Array<RenderQueueItem> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof AeRendererState
     */
    scheduledQueueItems?: Array<string> | null;
    /**
     * 
     * @type {CPUStats}
     * @memberof AeRendererState
     */
    renderCPUStats?: CPUStats;
    /**
     * 
     * @type {PauseState}
     * @memberof AeRendererState
     */
    pause?: PauseState;
}

export function AeRendererStateFromJSON(json: any): AeRendererState {
    return AeRendererStateFromJSONTyped(json, false);
}

export function AeRendererStateFromJSONTyped(json: any, ignoreDiscriminator: boolean): AeRendererState {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'machineId': !exists(json, 'machineId') ? undefined : json['machineId'],
        'settings': !exists(json, 'settings') ? undefined : json['settings'],
        'errorMessage': !exists(json, 'errorMessage') ? undefined : json['errorMessage'],
        'isDone': !exists(json, 'isDone') ? undefined : json['isDone'],
        'frameRate': !exists(json, 'frameRate') ? undefined : json['frameRate'],
        'jobs': !exists(json, 'jobs') ? undefined : (json['jobs'] === null ? null : (json['jobs'] as Array<any>).map(JobFromJSON)),
        'queue': !exists(json, 'queue') ? undefined : (json['queue'] === null ? null : (json['queue'] as Array<any>).map(RenderQueueItemFromJSON)),
        'scheduledQueueItems': !exists(json, 'scheduledQueueItems') ? undefined : json['scheduledQueueItems'],
        'renderCPUStats': !exists(json, 'renderCPUStats') ? undefined : CPUStatsFromJSON(json['renderCPUStats']),
        'pause': !exists(json, 'pause') ? undefined : PauseStateFromJSON(json['pause']),
    };
}

export function AeRendererStateToJSON(value?: AeRendererState | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'machineId': value.machineId,
        'settings': value.settings,
        'errorMessage': value.errorMessage,
        'isDone': value.isDone,
        'frameRate': value.frameRate,
        'jobs': value.jobs === undefined ? undefined : (value.jobs === null ? null : (value.jobs as Array<any>).map(JobToJSON)),
        'queue': value.queue === undefined ? undefined : (value.queue === null ? null : (value.queue as Array<any>).map(RenderQueueItemToJSON)),
        'scheduledQueueItems': value.scheduledQueueItems,
        'renderCPUStats': CPUStatsToJSON(value.renderCPUStats),
        'pause': PauseStateToJSON(value.pause),
    };
}


